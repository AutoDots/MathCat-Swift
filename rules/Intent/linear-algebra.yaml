---

-
  # vertical bars around a capital letter
  name: determinant-scalar
  tag: mrow
  match: 
    - "IsBracketed(., '|', '|') and "
    - "($SpeechStyle = 'SimpleSpeak' or ($SpeechStyle = 'ClearSpeak' and $ClearSpeak_AbsoluteValue != 'Cardinality')) and "
    - "*[2][self::m:mi and translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', '') = '']"
  replace:
  - intent:
      name: "determinant"
      children: [x: "*[2]"]

-
  # vertical bars around an mtable
  # FIX: could add a check to make sure it was a square mtable
  name: determinant
  tag: mrow
  match: 
    - "IsBracketed(., '|', '|') and  *[2][self::m:mtable]"
  replace:
  - intent:
      name: "determinant"
      attrs: "id='*[2]/@id'"
      children: [x: "*[2]/*"]

-
  # parens or brackets around an mtable
  name: matrix
  tag: mrow
  match: 
    - "(IsBracketed(., '(', ')') or IsBracketed(., '[', ']')) and *[2][self::m:mtable]"
  replace:
  - intent:
      name: "matrix"
      attrs: "id='*[2]/@id'"
      children: [x: "*[2]/*"]

-
  name: norm
  tag: mrow
  match: 
    - "IsBracketed(., '‚à•', '‚à•')"
  replace:
  - intent:
      name: "norm"
      children: [x: "*[2]"]


-
  name: norm
  tag: msub
  match: 
    - "*[1][IsBracketed(., '‚à•', '‚à•')]"
  replace:
  - intent:
      name: "subscripted-norm"
      children:
      - x: "*[1]/*[2]"   # grab the contents of the bracketed expr
      - x: "*[2]"

-
  name: vector-magnitude
  tag: mrow
  match: "IsBracketed(., '‚Äñ', '‚Äñ')"
  replace:
  - intent:
      name: "magnitude"
      children: [x: "*[2]"]

-
  name: transpose
  tag: msup
  match: 
    - "*[2][text()='T']"
  replace:
  - intent:
      name: "transpose"
      children: [x: "*[1]"]

-
  name: trace
  tag: mrow
  match: 
    - "count(*)=3 and (*[1][text()='tr' or text()='Tr']) and *[2][text()='\u2061']"
  replace:
  - intent:
      name: "trace"
      children: [x: "*[3]"]

-
  name: dimension
  tag: mrow
  match: 
    - "count(*)=3 and (*[1][text()='dim' or text()='Dim']) and *[2][text()='\u2061']"
  replace:
  - intent:
      name: "dimension"
      children: [x: "*[3]"]

-
  name: homomorphism
  tag: mrow
  match: 
    - "count(*)=3 and (*[1][text()='hom' or text()='Hom']) and *[2][text()='\u2061']"
  replace:
  - intent:
      name: "homomorphism"
      children: [x: "*[3]"]

-
  name: kernel
  tag: mrow
  match: 
    - "count(*)=3 and (*[1][text()='ker' or text()='Ker']) and *[2][text()='\u2061']"
  replace:
  - intent:
      name: "kernel"
      children: [x: "*[3]"]

-
  name: dot-product
  tag: mo
  # mathvariant='bold' is canonicalized to the math alphanumeric equivalent
  # I tried using the range 'ùêÄ'<=. and .<='ùê≥', but that doesn't work (xpath has bugs with 32 bit Unicode chars)
  match: 
    - "(.='\u22C5' or .='\u00B7') and
       preceding-sibling::*[1][ self::m:mover[*[2][.='‚Üí' or .='‚áÄ' or .='^']] or
                                descendant-or-self::*[self::m:mi and string-length(.)=1 and
                                                      translate(., 'ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêôùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥','')=''] ] and
       following-sibling::*[1][ self::m:mover[*[2][.='‚Üí' or .='‚áÄ' or .='^']] or
                                descendant-or-self::*[self::m:mi and string-length(.)=1 and
                                                      translate(., 'ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêôùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥','')=''] ]"
  replace:
  - intent:
      name: "dot-product"
      children: []

-
  name: cross-product
  tag: mo
  match: 
    - ".='√ó' and
       preceding-sibling::*[1][ self::m:mover[*[2]='‚Üí' or *[2]='‚áÄ' or *[2]='^'] or
                                descendant-or-self::*[self::m:mi and string-length(.)=1 and
                                                      translate(., 'ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêôùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥','')=''] ] and
       following-sibling::*[1][ self::m:mover[*[2]='‚Üí' or *[2]='‚áÄ' or *[2]='^'] or
                                descendant-or-self::*[self::m:mi and string-length(.)=1 and
                                                      translate(., 'ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêôùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥','')=''] ]"
  replace:
  - intent:
      name: "cross-product"
      children: []
